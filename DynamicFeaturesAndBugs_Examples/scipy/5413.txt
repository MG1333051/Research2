From 6aff5830fe18a24979376416740f50a7bd9edbd4 Mon Sep 17 00:00:00 2001
From: Pauli Virtanen <pav@iki.fi>
Date: Sat, 24 Oct 2015 16:39:26 +0300
Subject: [PATCH] BUG: linalg: work around LAPACK single-precision lwork
 computation issues

Lapack returns optimal lwork values in floating point variables.
However, single-precision mantissa is too small to hold accurate integer
values if they are too large. LAPACK <= 3.5.0 (at the least) return
truncated LWORK values, which can be smaller than the required values.
Work around this issue by taking the next larger fp value when dealing
with single-precision LWORK.
---
 scipy/_lib/_testutils.py               | 18 ++++++++++++++-
 scipy/linalg/basic.py                  |  8 ++-----
 scipy/linalg/decomp.py                 | 25 ++++++---------------
 scipy/linalg/decomp_svd.py             |  8 +++----
 scipy/linalg/lapack.py                 | 32 ++++++++++++++++++++++++++
 scipy/linalg/tests/test_lapack.py      | 41 ++++++++++++++++++++++++++++++++++
 scipy/sparse/tests/test_sparsetools.py | 14 +-----------
 7 files changed, 103 insertions(+), 43 deletions(-)

#########################删除一些文件  WBB

diff --git a/scipy/linalg/lapack.py b/scipy/linalg/lapack.py
index dd57966..f01944c 100644
--- a/scipy/linalg/lapack.py
+++ b/scipy/linalg/lapack.py
@@ -348,6 +348,8 @@
 
 __all__ = ['get_lapack_funcs']
 
+import numpy as _np
+
 from .blas import _get_funcs
 
 # Backward compatibility:
@@ -419,3 +421,33 @@ def get_lapack_funcs(names, arrays=(), dtype=None):
     return _get_funcs(names, arrays, dtype,
                       "LAPACK", _flapack, _clapack,
                       "flapack", "clapack", _lapack_alias)
+
+
+def _compute_lwork(routine, *args, **kwargs):
+    """
+    Round floating-point lwork returned by lapack to integer.
+
+    Several LAPACK routines compute optimal values for LWORK, which
+    they return in a floating-point variable. However, for large
+    values of LWORK, single-precision floating point is not sufficient
+    to hold the exact value --- some LAPACK versions (<= 3.5.0 at
+    least) truncate the returned integer to single precision and in
+    some cases this can be smaller than the required value.
+    """
+    lwork, info = routine(*args, **kwargs)
+    if info != 0:
+        raise ValueError("Internal work array size computation failed: %d" % (info,))
+
+    lwork = lwork.real
+
+    if getattr(routine, 'dtype', None) == _np.float32:                            #########################动态特性 getattr
+        # Single-precision routine -- take next fp value to work
+        # around possible truncation in LAPACK code
+        lwork = _np.nextafter(_np.float32(lwork), _np.float32(_np.inf))
+
+    lwork = int(lwork)
+    if lwork < 0 or lwork > _np.iinfo(_np.int32).max:
+        raise ValueError("Too large work array required -- computation cannot "
+                         "be performed with standard 32-bit LAPACK.")
+
+    return lwork
